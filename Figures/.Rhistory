for (day in seq(from = 2, to =  N)) {
# The time window in the recent past for which the incidence then contributes
# to incidence now:
infectiousness_range <- seq(from = max(day - max_si, 1), to = day - 1)
# The incidence for those days:
contributing_incidences <- df$delta_I[infectiousness_range]
# The weights for their contribution to incidence now:
weights <- si[day - infectiousness_range]
# Put together for incidence now:
incidence_today <- R_t[[day]] * sum(contributing_incidences * weights)
df$delta_I[[day]] <- incidence_today
df$I[[day]] <- df$I[[day - 1]] + incidence_today
}
return(df)
}
Infected=rep(0,N)
for (day in seq(from=1,to=N-1)){
contribution_day <- Renewal_process(N-day+1,I_0[day],R_t[day:N])
Infected[day:N] <- Infected[day:N] + contribution_day$I
}
#Last day arrivals do not infect anybody
Infected[N] <- Infected[N]+I_0[N]
group_name <- "Italy"
epidemic_day_1 <- "2022-01-27"
epi <- tibble(group = group_name,
date = seq(from = as.Date(epidemic_day_1),
by = 1, length.out = N ),
I = Infected,
community = c(0, diff(Infected)-I_0[2:N]),
imported = I_0)
ggplot() +
geom_point(data = epi, aes(x = date, y = I),) +
labs(x = 'time (days)', y = "Prevalence")+
theme(text=element_text(size=12, family="LM Roman 10"), axis.line = element_line(colour = 'black',
size = 1, linetype = "solid", ),  panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(epi) +
geom_point(aes(x=date,y=community,colour="blue")) +
geom_point(aes(x=date,y = imported,colour="orange")) +
labs(x = 'time (days)', y = "Incidence")+
theme_bw()+
scale_colour_manual("",breaks=c("blue","orange"), values=c("#0C7EF5","#F5A318"),labels=c("Community", "Imported"), name="")+
theme(text=element_text(size=16, family="LM Roman 10"), axis.line = element_line(colour = 'black',
size = 1, linetype = "solid", ),  panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
1.4/5.5
###############################################################################
#Simulate a renwal process (infection) with fixed reproduction number and serial
#interval, with multiple introductions at different times
###############################################################################
library(rstanarm)
library(ggplot2)
options(mc.cores = parallel::detectCores())
rm(list=ls()) # WARNING: delete all objects in your current R session
# Number of days of the epidemic period:
N <- 20
#We assume to seed the epidemic at day 1 to N with n infected cases
#Does need not to be integer
I_0 <- 5*exp(0.25*seq(from=1,to=N))
#We assume Rt is fixed at a constant value, but can vary on a daily basis
#To mimic daily variations of Rt
R <- 1.4
# The generation time distribution: the nth element is the fraction of
# transmissions that occur n days after infection.
# This is a discretised gamma distribution with mean 5.5 and std dev 2.14, as
# befits covid (Ferretti, Ledda et al 2020)
si <- c(0.0028993756, 0.0424730927, 0.1240492512, 0.1872169056, 0.1967815246,
0.1645307574, 0.1174711149, 0.0747170618, 0.0435081787, 0.0236309301,
0.0121317746, 0.0059451849, 0.0028018312, 0.0012772359, 0.0005657808)
max_si <- length(si)
# R_tilde(t), which is the reproduction number has a weekly random change:
# random draw from a normal distribution (that gets subsequently inverse logit
# transformed, like all covariates predicting R, in order to keep R in the range
# of interest). Specify the standard deviation
# of that normal here. (Zero means no walk.)
R_daily_step_stddev <- 0.1
R_t <- rep(R,N)
for (day in seq(2,N)) {
R_t[day] <-invlogit(rnorm(n = 1, mean = 0, sd = R_daily_step_stddev))-0.5+R_t[day-1]
}
#This simulates one renewal process
Renewal_process <- function(N,I_0,R_t){
group_name <- 'single_process'
pops <- data.frame(group = group_name)
# A data frame with one row per day
df <- tibble(group = group_name,
day = seq(from = 1, to =  N),
delta_I = c(I_0,rep(0,N-1)),
I = NA_real_)
df$I[[1]]=I_0
for (day in seq(from = 2, to =  N)) {
# The time window in the recent past for which the incidence then contributes
# to incidence now:
infectiousness_range <- seq(from = max(day - max_si, 1), to = day - 1)
# The incidence for those days:
contributing_incidences <- df$delta_I[infectiousness_range]
# The weights for their contribution to incidence now:
weights <- si[day - infectiousness_range]
# Put together for incidence now:
incidence_today <- R_t[[day]] * sum(contributing_incidences * weights)
df$delta_I[[day]] <- incidence_today
df$I[[day]] <- df$I[[day - 1]] + incidence_today
}
return(df)
}
Infected=rep(0,N)
for (day in seq(from=1,to=N-1)){
contribution_day <- Renewal_process(N-day+1,I_0[day],R_t[day:N])
Infected[day:N] <- Infected[day:N] + contribution_day$I
}
#Last day arrivals do not infect anybody
Infected[N] <- Infected[N]+I_0[N]
group_name <- "Italy"
epidemic_day_1 <- "2022-01-27"
epi <- tibble(group = group_name,
date = seq(from = as.Date(epidemic_day_1),
by = 1, length.out = N ),
I = Infected,
community = c(0, diff(Infected)-I_0[2:N]),
imported = I_0)
ggplot() +
geom_point(data = epi, aes(x = date, y = I),) +
labs(x = 'time (days)', y = "Prevalence")+
theme(text=element_text(size=12, family="LM Roman 10"), axis.line = element_line(colour = 'black',
size = 1, linetype = "solid", ),  panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(epi) +
geom_point(aes(x=date,y=community,colour="blue")) +
geom_point(aes(x=date,y = imported,colour="orange")) +
labs(x = 'time (days)', y = "Incidence")+
theme_bw()+
scale_colour_manual("",breaks=c("blue","orange"), values=c("#0C7EF5","#F5A318"),labels=c("Community", "Imported"), name="")+
theme(text=element_text(size=16, family="LM Roman 10"), axis.line = element_line(colour = 'black',
size = 1, linetype = "solid", ),  panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
0.4/5.5
###############################################################################
#Simulate a renwal process (infection) with fixed reproduction number and serial
#interval, with multiple introductions at different times
###############################################################################
library(rstanarm)
library(ggplot2)
options(mc.cores = parallel::detectCores())
rm(list=ls()) # WARNING: delete all objects in your current R session
# Number of days of the epidemic period:
N <- 20
#We assume to seed the epidemic at day 1 to N with n infected cases
#Does need not to be integer
I_0 <- 5*exp(0.07*seq(from=1,to=N))
#We assume Rt is fixed at a constant value, but can vary on a daily basis
#To mimic daily variations of Rt
R <- 1.4
# The generation time distribution: the nth element is the fraction of
# transmissions that occur n days after infection.
# This is a discretised gamma distribution with mean 5.5 and std dev 2.14, as
# befits covid (Ferretti, Ledda et al 2020)
si <- c(0.0028993756, 0.0424730927, 0.1240492512, 0.1872169056, 0.1967815246,
0.1645307574, 0.1174711149, 0.0747170618, 0.0435081787, 0.0236309301,
0.0121317746, 0.0059451849, 0.0028018312, 0.0012772359, 0.0005657808)
max_si <- length(si)
# R_tilde(t), which is the reproduction number has a weekly random change:
# random draw from a normal distribution (that gets subsequently inverse logit
# transformed, like all covariates predicting R, in order to keep R in the range
# of interest). Specify the standard deviation
# of that normal here. (Zero means no walk.)
R_daily_step_stddev <- 0.1
R_t <- rep(R,N)
for (day in seq(2,N)) {
R_t[day] <-invlogit(rnorm(n = 1, mean = 0, sd = R_daily_step_stddev))-0.5+R_t[day-1]
}
#This simulates one renewal process
Renewal_process <- function(N,I_0,R_t){
group_name <- 'single_process'
pops <- data.frame(group = group_name)
# A data frame with one row per day
df <- tibble(group = group_name,
day = seq(from = 1, to =  N),
delta_I = c(I_0,rep(0,N-1)),
I = NA_real_)
df$I[[1]]=I_0
for (day in seq(from = 2, to =  N)) {
# The time window in the recent past for which the incidence then contributes
# to incidence now:
infectiousness_range <- seq(from = max(day - max_si, 1), to = day - 1)
# The incidence for those days:
contributing_incidences <- df$delta_I[infectiousness_range]
# The weights for their contribution to incidence now:
weights <- si[day - infectiousness_range]
# Put together for incidence now:
incidence_today <- R_t[[day]] * sum(contributing_incidences * weights)
df$delta_I[[day]] <- incidence_today
df$I[[day]] <- df$I[[day - 1]] + incidence_today
}
return(df)
}
Infected=rep(0,N)
for (day in seq(from=1,to=N-1)){
contribution_day <- Renewal_process(N-day+1,I_0[day],R_t[day:N])
Infected[day:N] <- Infected[day:N] + contribution_day$I
}
#Last day arrivals do not infect anybody
Infected[N] <- Infected[N]+I_0[N]
group_name <- "Italy"
epidemic_day_1 <- "2022-01-27"
epi <- tibble(group = group_name,
date = seq(from = as.Date(epidemic_day_1),
by = 1, length.out = N ),
I = Infected,
community = c(0, diff(Infected)-I_0[2:N]),
imported = I_0)
ggplot() +
geom_point(data = epi, aes(x = date, y = I),) +
labs(x = 'time (days)', y = "Prevalence")+
theme(text=element_text(size=12, family="LM Roman 10"), axis.line = element_line(colour = 'black',
size = 1, linetype = "solid", ),  panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(epi) +
geom_point(aes(x=date,y=community,colour="blue")) +
geom_point(aes(x=date,y = imported,colour="orange")) +
labs(x = 'time (days)', y = "Incidence")+
theme_bw()+
scale_colour_manual("",breaks=c("blue","orange"), values=c("#0C7EF5","#F5A318"),labels=c("Community", "Imported"), name="")+
theme(text=element_text(size=16, family="LM Roman 10"), axis.line = element_line(colour = 'black',
size = 1, linetype = "solid", ),  panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
###############################################################################
#Simulate a renwal process (infection) with fixed reproduction number and serial
#interval, with multiple introductions at different times
###############################################################################
library(rstanarm)
library(ggplot2)
options(mc.cores = parallel::detectCores())
rm(list=ls()) # WARNING: delete all objects in your current R session
# Number of days of the epidemic period:
N <- 20
#We assume to seed the epidemic at day 1 to N with n infected cases
#Does need not to be integer
#In this example I use I~I_0*exp((R_0-1)/T t), where
#R_0~1.5
I_0 <- 5*exp((1.5-1)/5*seq(from=1,to=N))
#We assume Rt is fixed at a constant value, but can vary on a daily basis
#To mimic daily variations of Rt
R <- 1.4
# The generation time distribution: the nth element is the fraction of
# transmissions that occur n days after infection.
# This is a discretised gamma distribution with mean 5.5 and std dev 2.14, as
# befits covid (Ferretti, Ledda et al 2020)
si <- c(0.0028993756, 0.0424730927, 0.1240492512, 0.1872169056, 0.1967815246,
0.1645307574, 0.1174711149, 0.0747170618, 0.0435081787, 0.0236309301,
0.0121317746, 0.0059451849, 0.0028018312, 0.0012772359, 0.0005657808)
max_si <- length(si)
# R_tilde(t), which is the reproduction number has a weekly random change:
# random draw from a normal distribution (that gets subsequently inverse logit
# transformed, like all covariates predicting R, in order to keep R in the range
# of interest). Specify the standard deviation
# of that normal here. (Zero means no walk.)
R_daily_step_stddev <- 0.1
R_t <- rep(R,N)
for (day in seq(2,N)) {
R_t[day] <-invlogit(rnorm(n = 1, mean = 0, sd = R_daily_step_stddev))-0.5+R_t[day-1]
}
#This simulates one renewal process
Renewal_process <- function(N,I_0,R_t){
group_name <- 'single_process'
pops <- data.frame(group = group_name)
# A data frame with one row per day
df <- tibble(group = group_name,
day = seq(from = 1, to =  N),
delta_I = c(I_0,rep(0,N-1)),
I = NA_real_)
df$I[[1]]=I_0
for (day in seq(from = 2, to =  N)) {
# The time window in the recent past for which the incidence then contributes
# to incidence now:
infectiousness_range <- seq(from = max(day - max_si, 1), to = day - 1)
# The incidence for those days:
contributing_incidences <- df$delta_I[infectiousness_range]
# The weights for their contribution to incidence now:
weights <- si[day - infectiousness_range]
# Put together for incidence now:
incidence_today <- R_t[[day]] * sum(contributing_incidences * weights)
df$delta_I[[day]] <- incidence_today
df$I[[day]] <- df$I[[day - 1]] + incidence_today
}
return(df)
}
Infected=rep(0,N)
for (day in seq(from=1,to=N-1)){
contribution_day <- Renewal_process(N-day+1,I_0[day],R_t[day:N])
Infected[day:N] <- Infected[day:N] + contribution_day$I
}
#Last day arrivals do not infect anybody
Infected[N] <- Infected[N]+I_0[N]
group_name <- "Italy"
epidemic_day_1 <- "2022-01-27"
epi <- tibble(group = group_name,
date = seq(from = as.Date(epidemic_day_1),
by = 1, length.out = N ),
I = Infected,
community = c(0, diff(Infected)-I_0[2:N]),
imported = I_0)
ggplot() +
geom_point(data = epi, aes(x = date, y = I),) +
labs(x = 'time (days)', y = "Prevalence")+
theme(text=element_text(size=12, family="LM Roman 10"), axis.line = element_line(colour = 'black',
size = 1, linetype = "solid", ),  panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(epi) +
geom_point(aes(x=date,y=community,colour="blue")) +
geom_point(aes(x=date,y = imported,colour="orange")) +
labs(x = 'time (days)', y = "Incidence")+
theme_bw()+
scale_colour_manual("",breaks=c("blue","orange"), values=c("#0C7EF5","#F5A318"),labels=c("Community", "Imported"), name="")+
theme(text=element_text(size=16, family="LM Roman 10"), axis.line = element_line(colour = 'black',
size = 1, linetype = "solid", ),  panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
###############################################################################
#Simulate a renwal process (infection) with fixed reproduction number and serial
#interval, with multiple introductions at different times
###############################################################################
library(rstanarm)
library(ggplot2)
options(mc.cores = parallel::detectCores())
rm(list=ls()) # WARNING: delete all objects in your current R session
# Number of days of the epidemic period:
N <- 20
#We assume to seed the epidemic at day 1 to N with n infected cases
#Does need not to be integer
#In this example I use I~I_0*exp((R_0-1)/T t), where
#R_0~1.3
I_0 <- 5*exp((1.5-1)/5*seq(from=1,to=N))
#We assume Rt is fixed at a constant value, but can vary on a daily basis
#To mimic daily variations of Rt
R <- 1.4
# The generation time distribution: the nth element is the fraction of
# transmissions that occur n days after infection.
# This is a discretised gamma distribution with mean 5.5 and std dev 2.14, as
# befits covid (Ferretti, Ledda et al 2020)
si <- c(0.0028993756, 0.0424730927, 0.1240492512, 0.1872169056, 0.1967815246,
0.1645307574, 0.1174711149, 0.0747170618, 0.0435081787, 0.0236309301,
0.0121317746, 0.0059451849, 0.0028018312, 0.0012772359, 0.0005657808)
max_si <- length(si)
# R_tilde(t), which is the reproduction number has a weekly random change:
# random draw from a normal distribution (that gets subsequently inverse logit
# transformed, like all covariates predicting R, in order to keep R in the range
# of interest). Specify the standard deviation
# of that normal here. (Zero means no walk.)
R_daily_step_stddev <- 0.1
R_t <- rep(R,N)
for (day in seq(2,N)) {
R_t[day] <-invlogit(rnorm(n = 1, mean = 0, sd = R_daily_step_stddev))-0.5+R_t[day-1]
}
#This simulates one renewal process
Renewal_process <- function(N,I_0,R_t){
group_name <- 'single_process'
pops <- data.frame(group = group_name)
# A data frame with one row per day
df <- tibble(group = group_name,
day = seq(from = 1, to =  N),
delta_I = c(I_0,rep(0,N-1)),
I = NA_real_)
df$I[[1]]=I_0
for (day in seq(from = 2, to =  N)) {
# The time window in the recent past for which the incidence then contributes
# to incidence now:
infectiousness_range <- seq(from = max(day - max_si, 1), to = day - 1)
# The incidence for those days:
contributing_incidences <- df$delta_I[infectiousness_range]
# The weights for their contribution to incidence now:
weights <- si[day - infectiousness_range]
# Put together for incidence now:
incidence_today <- R_t[[day]] * sum(contributing_incidences * weights)
df$delta_I[[day]] <- incidence_today
df$I[[day]] <- df$I[[day - 1]] + incidence_today
}
return(df)
}
Infected=rep(0,N)
for (day in seq(from=1,to=N-1)){
contribution_day <- Renewal_process(N-day+1,I_0[day],R_t[day:N])
Infected[day:N] <- Infected[day:N] + contribution_day$I
}
#Last day arrivals do not infect anybody
Infected[N] <- Infected[N]+I_0[N]
group_name <- "Italy"
epidemic_day_1 <- "2022-01-27"
epi <- tibble(group = group_name,
date = seq(from = as.Date(epidemic_day_1),
by = 1, length.out = N ),
I = Infected,
community = c(0, diff(Infected)-I_0[2:N]),
imported = I_0)
ggplot() +
geom_point(data = epi, aes(x = date, y = I),) +
labs(x = 'time (days)', y = "Prevalence")+
theme(text=element_text(size=12, family="LM Roman 10"), axis.line = element_line(colour = 'black',
size = 1, linetype = "solid", ),  panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(epi) +
geom_point(aes(x=date,y=community,colour="blue")) +
geom_point(aes(x=date,y = imported,colour="orange")) +
labs(x = 'time (days)', y = "Incidence")+
theme_bw()+
scale_colour_manual("",breaks=c("blue","orange"), values=c("#0C7EF5","#F5A318"),labels=c("Community", "Imported"), name="")+
theme(text=element_text(size=16, family="LM Roman 10"), axis.line = element_line(colour = 'black',
size = 1, linetype = "solid", ),  panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
###############################################################################
#Simulate a renwal process (infection) with fixed reproduction number and serial
#interval, with multiple introductions at different times
###############################################################################
library(rstanarm)
library(ggplot2)
options(mc.cores = parallel::detectCores())
rm(list=ls()) # WARNING: delete all objects in your current R session
# Number of days of the epidemic period:
N <- 20
#We assume to seed the epidemic at day 1 to N with n infected cases
#Does need not to be integer
#In this example I use I~I_0*exp((R_0-1)/T t), where
#R_0~1.3
I_0 <- 5*exp((1.3-1)/5*seq(from=1,to=N))
#We assume Rt is fixed at a constant value, but can vary on a daily basis
#To mimic daily variations of Rt
R <- 1.4
# The generation time distribution: the nth element is the fraction of
# transmissions that occur n days after infection.
# This is a discretised gamma distribution with mean 5.5 and std dev 2.14, as
# befits covid (Ferretti, Ledda et al 2020)
si <- c(0.0028993756, 0.0424730927, 0.1240492512, 0.1872169056, 0.1967815246,
0.1645307574, 0.1174711149, 0.0747170618, 0.0435081787, 0.0236309301,
0.0121317746, 0.0059451849, 0.0028018312, 0.0012772359, 0.0005657808)
max_si <- length(si)
# R_tilde(t), which is the reproduction number has a weekly random change:
# random draw from a normal distribution (that gets subsequently inverse logit
# transformed, like all covariates predicting R, in order to keep R in the range
# of interest). Specify the standard deviation
# of that normal here. (Zero means no walk.)
R_daily_step_stddev <- 0.1
R_t <- rep(R,N)
for (day in seq(2,N)) {
R_t[day] <-invlogit(rnorm(n = 1, mean = 0, sd = R_daily_step_stddev))-0.5+R_t[day-1]
}
#This simulates one renewal process
Renewal_process <- function(N,I_0,R_t){
group_name <- 'single_process'
pops <- data.frame(group = group_name)
# A data frame with one row per day
df <- tibble(group = group_name,
day = seq(from = 1, to =  N),
delta_I = c(I_0,rep(0,N-1)),
I = NA_real_)
df$I[[1]]=I_0
for (day in seq(from = 2, to =  N)) {
# The time window in the recent past for which the incidence then contributes
# to incidence now:
infectiousness_range <- seq(from = max(day - max_si, 1), to = day - 1)
# The incidence for those days:
contributing_incidences <- df$delta_I[infectiousness_range]
# The weights for their contribution to incidence now:
weights <- si[day - infectiousness_range]
# Put together for incidence now:
incidence_today <- R_t[[day]] * sum(contributing_incidences * weights)
df$delta_I[[day]] <- incidence_today
df$I[[day]] <- df$I[[day - 1]] + incidence_today
}
return(df)
}
Infected=rep(0,N)
for (day in seq(from=1,to=N-1)){
contribution_day <- Renewal_process(N-day+1,I_0[day],R_t[day:N])
Infected[day:N] <- Infected[day:N] + contribution_day$I
}
#Last day arrivals do not infect anybody
Infected[N] <- Infected[N]+I_0[N]
group_name <- "Italy"
epidemic_day_1 <- "2022-01-27"
epi <- tibble(group = group_name,
date = seq(from = as.Date(epidemic_day_1),
by = 1, length.out = N ),
I = Infected,
community = c(0, diff(Infected)-I_0[2:N]),
imported = I_0)
ggplot() +
geom_point(data = epi, aes(x = date, y = I),) +
labs(x = 'time (days)', y = "Prevalence")+
theme(text=element_text(size=12, family="LM Roman 10"), axis.line = element_line(colour = 'black',
size = 1, linetype = "solid", ),  panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(epi) +
geom_point(aes(x=date,y=community,colour="blue")) +
geom_point(aes(x=date,y = imported,colour="orange")) +
labs(x = 'time (days)', y = "Incidence")+
theme_bw()+
scale_colour_manual("",breaks=c("blue","orange"), values=c("#0C7EF5","#F5A318"),labels=c("Community", "Imported"), name="")+
theme(text=element_text(size=16, family="LM Roman 10"), axis.line = element_line(colour = 'black',
size = 1, linetype = "solid", ),  panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot() +
geom_point(data = epi, aes(x = date, y = I),) +
labs(x = 'time (days)', y = "Prevalence")+
theme(text=element_text(size=12, family="LM Roman 10"), axis.line = element_line(colour = 'black',
size = 1, linetype = "solid", ),  panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
1.3-1)/5
0.3/5
Rt
R_t
min(R_t)
max(R_t)
I_0
gc()
